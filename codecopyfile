use Psr\Log\LoggerInterface;
$writer = new \Zend_Log_Writer_Stream(BP . '/var/log/custom.log');       
$logger = new \Zend_Log();$logger->addWriter($writer);
$logger->info();
nojak25094@fulwark.com
tAy56xWC5H66p7e
$logger->info(print_r($roundCollection->getSelect()->__toString(), true));
MDC\RecuringOrder\Helper\Data.php
MDC\AvailablityDate\Helper\Dat.php
======================================================================================
app/code/MDC/LoginAsCustomerSeller/view/sellerhtml/templates/customer/orderhistory.phtml	

			$selectedFrequency = $order->getDeliveryFrequancy();	
                        $deliveryDate = date("d/m/Y",strtotime($order->getDeliveryDate()));
                        // Check if the order is canceled or delivered
                        if ($order->getState() == 'canceled' || $order->getState() == 'delivered') {
                            $nextDeliveryDate = date("d/m/Y", strtotime($deliveryDate . " + $selectedFrequency days"));
                            $order->setDeliveryDate($nextDeliveryDate);

                        }
=========================================================
in Enter Lead Day it should only accept the 0,1,2 values and should throw an Error For any wrong Input :
Error: Enter Valid Value
Image
if (isset($post['cutOffTime']) || isset($post['lead_day'])) {
                    $leadDay = $post['lead_day'];
//valid for the value and accept a numeric value
                    if(!in_array($leadDay, [0, 1, 2]) || !is_numeric($leadDay)) {
                        $responseData = ['success' => false, 'message' => __('Enter Valid Value')];
                    } else {
                        $vendorData->setLeadDay($post['lead_day']);
                        $vendorData->setCutoffTime($post['cutOffTime']);
                        $vendorData->save();
                        $responseData = ['success' => true, 'message' => __('Data Saved Successfully.')];
                    }
                } 
            }
//get the success msg
we have to add the in controller file ex(setcutofftime.php) where file is calling in responsedata=""
<div class ="mov-success-msg" style="display:none;">
    </div>
<div class ="error-message">
    </div>
//get the hidden values
<input id="leaddayValueHidden" name="leaddayValueHidden" type="hidden" value="" />

//jquery 
			  $("#set-cutoff-time-form").submit(function(e){
                
                e.preventDefault();
                var cutOffTime = jQuery("input[name='cutofftime']").val();
                var leadDay = jQuery("input[name = 'lead_day']").val();
/call the hiidenvalue
                $("#cutofftimeValueHidden").val(cutOffTime);
                $("#leaddayValueHidden").val(leadDay);
                if (cutOffTime!="" || leadDay!="" || cancelOrderCutOffTime!="") {
                    $.ajax({
                        url: "<?= $this->getUrl('cutofftime/cutofftime/save'); ?>",
                        type: "POST",
                        dataType: 'json',
                        data: { cutOffTime:cutOffTime, lead_day: leadDay },
                        showLoader: true,
                        success: function(response) {
//show message
				if(response.success){
                            $(".mov-success-msg").show();
                            $(".mov-success-msg").text(response.message);
("#error-message").hide();
//reset the form
                            $("#set-cutoff-time-form")[0].reset();
//call the input values to the hidden id value
                            $("input[name='cutofftime']").val($("#cutofftimeValueHidden").val());
                            $("input[name='lead_day']").val($("#leaddayValueHidden").val());
                            setTimeout(function() {
                                $(".mov-success-msg").hide();
                            }, 1500);  
                            $("#edit").trigger("click"); 
			} else {
				 $("#error-message").text(response.message);
			}
                        },
                        error: function(response) {
                             
                            alert(response.message);
                        }
                    });
                } 
            });
        });
</script>
app/code/MDC/SetCutOffTime/Controller/Sellerhtml/CutOffTime/Save.php
app/design/sellerhtml/Rocketbazaar/vendor/Magedelight_Vendor/templates/account/profile/setcutofftime.phtml

 ===============================================================================================================================

TypeError: strtolower() expects parameter 1 to be string, null given in /var/www/html/apetito-ltd/app/code/MDC/Sales/Controller/Sellerhtml/Order/Orderoverviewpopupview.php:141

The error message "TypeError: strtolower() expects parameter 1 to be string, null given" indicates that a function called strtolower() is expecting a string as its argument, but it is receiving a null value instead.
to resolve this issue we need to check that  the variable is not equal to null.
if (count($resChildCustomerRelation) > 0) {
            if (!is_null($resChildCustomerRelation[0]['relation_type']) && strtolower($resChildCustomerRelation[0]['relation_type']) != 'self') {
                return true;
            }
        }
app/code/MDC/Sales/Controller/Sellerhtml/Order/Orderoverviewpopupview.php
app/code/MDC/RecentOrder/Controller/Sellerhtml/Recentorder/OrderOverviewHistoryPopupview.php
===============================================================================================================
postcode validation 
<p class="postcode-error" style="display:none; color:red">Please Enter Valid Postcode</p>
                    <div class="field postcode">

                        <input type="text" name="postcode" value="<?= $block->escapeHtml($callerData[0]['postcode']);?>" title="<?= $block->escapeHtml("Postcode");?>" class="input-text" id="Postcode_1" placeholder="<?= $block->escapeHtml("Postcode");?>" data-validate="{'required':true, 'validate-zip-international':true}"

                       data-msg-required="Post code can't be empty" maxlength="8" />
 data-msg-required="Post code can't be empty" maxlength="8" oninput="this.value = this.value.toUpperCase()" 
/>
    $('#Postcode_1').on('input', function(){
                var regexp = /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/;
                var postcode = $('#Postcode_1').val();
                var zipcode = postcode.toUpperCase();
                if(regexp.test(zipcode)){
                    $('.postcode-error').hide();
                    $('.save-caller').attr('disabled', false);
                }
                else{
                    $(".postcode-error").show();
                    $('.save-caller').attr('disabled', 'disabled');
                }
            });
===================================================================================================================
in the database is not setting the self for creation of self account
// Explicitly save the "Self" relation type
    if ($childCustomerRelation->getRelationType() === '') {
        $childCustomerRelation->setRelationType('Self');
    }

//logger to check the saved data in databases
$logger->info(print_r($childCustomerRelation->toArray(), true));
app/code/MDC/CallerCustomer/Controller/Sellerhtml/Account/CreatePost.php
=======================================================================================================================

upgrade version
problem: "We can't add this item to your shopping cart right now. Deprecated Functionality: Automatic conversion of false to array is deprecated
$this->_availableVendors = [];
========================================================================================
if ($zipcode !== null) {
    $zipcode = strtoupper(str_replace(" ", "", $zipcode));
}
Exception #0 (Exception): Deprecated Functionality: str_replace(): Passing null to parameter #3 ($subject) of type array|string is deprecated i
=========================================================================================================
Warning: Undefined array key "someone_else_relation_to_caller" in C:\xampp\htdocs\wff\app\code\MDC\CallerCustomer\Controller\Sellerhtml\Account\CreatePost.php on line 549
solution is isset
if(isset($data['someone_else_relation_to_caller'])){
}
========================================================================================
phtml
$logger = \Magento\Framework\App\ObjectManager::getInstance()->get(\Psr\Log\LoggerInterface::class); 
$writer = new \Zend_Log_Writer_Stream(BP . '/var/log/allegen.log');       
$logger = new \Zend_Log();$logger->addWriter($writer);
$logger->debug('Debug Message: $allergen1 - ' . print_r($dietaryDataArray , true));
================================================================================================
it should accept only number and space 
/^[0-9\s]*$/.test(value);
===========================================
it should accept the space 
replace(/\s+/g, '')
================================================================
when product is added open minicart and close after 3seconds
openMinicart: function () {
            $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("open");
            // $(this.minicartElement).find(this.dropdownDialogElement).dropdownDialog('open');
            
            setTimeout(function() {
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("close");
            }, 3000); 
        }
===============================================================================================
app/design/frontend/Amasty/JetTheme/Magento_CustomerCustomAttributes/templates/customer/form/edit.phtml
$( document ).ready(function () {
            $("#telephoneno").on("input", function () {
                var inputValue = $(this).val();
                var numericValue = inputValue.replace(/[^0-9\s]/g, '');
                $(this).val(numericValue);
            });
        });

        $( document ).ready(function () {
            $("#mobileno").on("input", function () {
                var Value = $(this).val();
                var numberValue = Value.replace(/[^0-9\s]/g, '');
                $(this).val(numberValue);
            });
        });
==========================================================================================================
app/design/frontend/Amasty/JetTheme/Magento_Checkout/web/js/view/minicart-mixin.js
define([
 define([
    'jquery',
    'underscore'
], function ($, _) {
@@ -22,12 +22,18 @@ define([
            this._super();
            $minicartElement = $(this.minicartElement);
            
            $minicartElement.on('contentLoading', function () {
                $minicartElement.on('contentUpdated', function () {
                        self.openMinicart();
                    self.openMinicart();
                    self.onClickPopup();
                    self.onButtonPopup();
                    self.onButtonPlusPopup()
                    self.onButtonMinusPopup();
                });
            });
            
            return this;
        },
@@ -46,17 +52,58 @@ define([
            return this.getCartParamUnsanitizedHtml(name);
        },
//when clicking on mini cart icon opens popup
        onClickPopup: function (){
            $('.action.showcart').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button opens a popup
        onButtonPopup: function (){
            $('.action.tocart').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button to increase the quantity(plus), it opens popup
        onButtonPlusPopup: function (){
            $('.cart-plus').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button to decrease the quantity(mius), it opens popup
        onButtonMinusPopup: function (){
            $('.cart-minus').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
        /**
         * Open mini shopping cart.
         * @returns {void}
         */
        openMinicart: function () {
            $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("open");
            // $(this.minicartElement).find(this.dropdownDialogElement).dropdownDialog('open');
            //set timeout
            setTimeout(function() {
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("close");
            }, 3000); 
            var minicart = $('[data-block="minicart"]'); 
            //var minicart2 = $('.minicart-wrapper');       
            var minicartPopup = minicart.find('[data-role="dropdownDialog"]').dropdownDialog('open');        
            var timeout = 3000;
            if (minicartPopup.length) {        
                setTimeout(function () {                 
                    minicartPopup.hide();             
                }, timeout);         
            }
