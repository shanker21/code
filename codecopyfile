tBJuDGU9N46hZ4NqQfGY
196.12.41.78
OneD#GiTalsKRK
sudo update-alternatives --config php
<div data-bind="text: console.log($parent)"></div>
vendor/bin/phpcs --standard=Magento2 
vendor/bin/phpcbf --standard=Magento2 
composer self-update --rollback
 
[xdebug]
xdebug.mode = debug
zend_extension=/usr/lib/php/20230831/xdebug.so
xdebug.start_with_request = yes
xdebug.remote_enable = 1
xdebug.remote_handler = dbgp
xdebug.remote_host = 127.0.0.1
xdebug.remote_log = /tmp/xdebug_remote.log
xdebug.remote_mode = req
xdebug.remote_port = 9003
xdebug.force_display_errors


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
use Psr\Log\LoggerInterface;
$writer = new \Zend_Log_Writer_Stream(BP . '/var/log/custom.log');       
$logger = new \Zend_Log();$logger->addWriter($writer);
$logger->info();
nojak25094@fulwark.com
tAy56xWC5H66p7e
$logger->info(print_r($roundCollection->getSelect()->__toString(), true));
MDC\RecuringOrder\Helper\Data.php
MDC\AvailablityDate\Helper\Dat.php
======================================================================================
app/code/MDC/LoginAsCustomerSeller/view/sellerhtml/templates/customer/orderhistory.phtml	

			$selectedFrequency = $order->getDeliveryFrequancy();	
                        $deliveryDate = date("d/m/Y",strtotime($order->getDeliveryDate()));
                        // Check if the order is canceled or delivered
                        if ($order->getState() == 'canceled' || $order->getState() == 'delivered') {
                            $nextDeliveryDate = date("d/m/Y", strtotime($deliveryDate . " + $selectedFrequency days"));
                            $order->setDeliveryDate($nextDeliveryDate);

                        }
=========================================================
in Enter Lead Day it should only accept the 0,1,2 values and should throw an Error For any wrong Input :
Error: Enter Valid Value
Image
if (isset($post['cutOffTime']) || isset($post['lead_day'])) {
                    $leadDay = $post['lead_day'];
//valid for the value and accept a numeric value
                    if(!in_array($leadDay, [0, 1, 2]) || !is_numeric($leadDay)) {
                        $responseData = ['success' => false, 'message' => __('Enter Valid Value')];
                    } else {
                        $vendorData->setLeadDay($post['lead_day']);
                        $vendorData->setCutoffTime($post['cutOffTime']);
                        $vendorData->save();
                        $responseData = ['success' => true, 'message' => __('Data Saved Successfully.')];
                    }
                } 
            }
//get the success msg
we have to add the in controller file ex(setcutofftime.php) where file is calling in responsedata=""
<div class ="mov-success-msg" style="display:none;">
    </div>
<div class ="error-message">
    </div>
//get the hidden values
<input id="leaddayValueHidden" name="leaddayValueHidden" type="hidden" value="" />

//jquery 
			  $("#set-cutoff-time-form").submit(function(e){
                
                e.preventDefault();
                var cutOffTime = jQuery("input[name='cutofftime']").val();
                var leadDay = jQuery("input[name = 'lead_day']").val();
/call the hiidenvalue
                $("#cutofftimeValueHidden").val(cutOffTime);
                $("#leaddayValueHidden").val(leadDay);
                if (cutOffTime!="" || leadDay!="" || cancelOrderCutOffTime!="") {
                    $.ajax({
                        url: "<?= $this->getUrl('cutofftime/cutofftime/save'); ?>",
                        type: "POST",
                        dataType: 'json',
                        data: { cutOffTime:cutOffTime, lead_day: leadDay },
                        showLoader: true,
                        success: function(response) {
//show message
				if(response.success){
                            $(".mov-success-msg").show();
                            $(".mov-success-msg").text(response.message);
("#error-message").hide();
//reset the form
                            $("#set-cutoff-time-form")[0].reset();
//call the input values to the hidden id value
                            $("input[name='cutofftime']").val($("#cutofftimeValueHidden").val());
                            $("input[name='lead_day']").val($("#leaddayValueHidden").val());
                            setTimeout(function() {
                                $(".mov-success-msg").hide();
                            }, 1500);  
                            $("#edit").trigger("click"); 
			} else {
				 $("#error-message").text(response.message);
			}
                        },
                        error: function(response) {
                             
                            alert(response.message);
                        }
                    });
                } 
            });
        });
</script>
app/code/MDC/SetCutOffTime/Controller/Sellerhtml/CutOffTime/Save.php
app/design/sellerhtml/Rocketbazaar/vendor/Magedelight_Vendor/templates/account/profile/setcutofftime.phtml

 ===============================================================================================================================

TypeError: strtolower() expects parameter 1 to be string, null given in /var/www/html/apetito-ltd/app/code/MDC/Sales/Controller/Sellerhtml/Order/Orderoverviewpopupview.php:141

The error message "TypeError: strtolower() expects parameter 1 to be string, null given" indicates that a function called strtolower() is expecting a string as its argument, but it is receiving a null value instead.
to resolve this issue we need to check that  the variable is not equal to null.
if (count($resChildCustomerRelation) > 0) {
            if (!is_null($resChildCustomerRelation[0]['relation_type']) && strtolower($resChildCustomerRelation[0]['relation_type']) != 'self') {
                return true;
            }
        }
app/code/MDC/Sales/Controller/Sellerhtml/Order/Orderoverviewpopupview.php
app/code/MDC/RecentOrder/Controller/Sellerhtml/Recentorder/OrderOverviewHistoryPopupview.php
===============================================================================================================
postcode validation 
<p class="postcode-error" style="display:none; color:red">Please Enter Valid Postcode</p>
                    <div class="field postcode">

                        <input type="text" name="postcode" value="<?= $block->escapeHtml($callerData[0]['postcode']);?>" title="<?= $block->escapeHtml("Postcode");?>" class="input-text" id="Postcode_1" placeholder="<?= $block->escapeHtml("Postcode");?>" data-validate="{'required':true, 'validate-zip-international':true}"

                       data-msg-required="Post code can't be empty" maxlength="8" />
 data-msg-required="Post code can't be empty" maxlength="8" oninput="this.value = this.value.toUpperCase()" 
/>
    $('#Postcode_1').on('input', function(){
                var regexp = /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/;
                var postcode = $('#Postcode_1').val();
                var zipcode = postcode.toUpperCase();
                if(regexp.test(zipcode)){
                    $('.postcode-error').hide();
                    $('.save-caller').attr('disabled', false);
                }
                else{
                    $(".postcode-error").show();
                    $('.save-caller').attr('disabled', 'disabled');
                }
            });
===================================================================================================================
in the database is not setting the self for creation of self account
// Explicitly save the "Self" relation type
    if ($childCustomerRelation->getRelationType() === '') {
        $childCustomerRelation->setRelationType('Self');
    }

//logger to check the saved data in databases
$logger->info(print_r($childCustomerRelation->toArray(), true));
app/code/MDC/CallerCustomer/Controller/Sellerhtml/Account/CreatePost.php
=======================================================================================================================

upgrade version
problem: "We can't add this item to your shopping cart right now. Deprecated Functionality: Automatic conversion of false to array is deprecated
$this->_availableVendors = [];
========================================================================================
if ($zipcode !== null) {
    $zipcode = strtoupper(str_replace(" ", "", $zipcode));
}
Exception #0 (Exception): Deprecated Functionality: str_replace(): Passing null to parameter #3 ($subject) of type array|string is deprecated i
=========================================================================================================
Warning: Undefined array key "someone_else_relation_to_caller" in C:\xampp\htdocs\wff\app\code\MDC\CallerCustomer\Controller\Sellerhtml\Account\CreatePost.php on line 549
solution is isset
if(isset($data['someone_else_relation_to_caller'])){
}
========================================================================================
phtml
$logger = \Magento\Framework\App\ObjectManager::getInstance()->get(\Psr\Log\LoggerInterface::class); 
$writer = new \Zend_Log_Writer_Stream(BP . '/var/log/allegen.log');       
$logger = new \Zend_Log();$logger->addWriter($writer);
$logger->debug('Debug Message: $allergen1 - ' . print_r($dietaryDataArray , true));
================================================================================================
it should accept only number and space 
/^[0-9\s]*$/.test(value);
===========================================
it should accept the space 
replace(/\s+/g, '')
================================================================
when product is added open minicart and close after 3seconds
openMinicart: function () {
            $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("open");
            // $(this.minicartElement).find(this.dropdownDialogElement).dropdownDialog('open');
            
            setTimeout(function() {
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("close");
            }, 3000); 
        }
===============================================================================================
app/design/frontend/Amasty/JetTheme/Magento_CustomerCustomAttributes/templates/customer/form/edit.phtml
$( document ).ready(function () {
            $("#telephoneno").on("input", function () {
                var inputValue = $(this).val();
                var numericValue = inputValue.replace(/[^0-9\s]/g, '');
                $(this).val(numericValue);
            });
        });

        $( document ).ready(function () {
            $("#mobileno").on("input", function () {
                var Value = $(this).val();
                var numberValue = Value.replace(/[^0-9\s]/g, '');
                $(this).val(numberValue);
            });
        });
==========================================================================================================
app/design/frontend/Amasty/JetTheme/Magento_Checkout/web/js/view/minicart-mixin.js
define([
 define([
    'jquery',
    'underscore'
], function ($, _) {
@@ -22,12 +22,18 @@ define([
            this._super();
            $minicartElement = $(this.minicartElement);
            
            $minicartElement.on('contentLoading', function () {
                $minicartElement.on('contentUpdated', function () {
                        self.openMinicart();
                    self.openMinicart();
                    self.onClickPopup();
                    self.onButtonPopup();
                    self.onButtonPlusPopup()
                    self.onButtonMinusPopup();
                });
            });
            
            return this;
        },
@@ -46,17 +52,58 @@ define([
            return this.getCartParamUnsanitizedHtml(name);
        },
//when clicking on mini cart icon opens popup
        onClickPopup: function (){
            $('.action.showcart').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button opens a popup
        onButtonPopup: function (){
            $('.action.tocart').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button to increase the quantity(plus), it opens popup
        onButtonPlusPopup: function (){
            $('.cart-plus').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
//when clicking on the add to cart button to decrease the quantity(mius), it opens popup
        onButtonMinusPopup: function (){
            $('.cart-minus').on('click', function () { 
                //alert('click');            
                // Show the mini cart popup            
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog('open'); 
                $('.block-minicart').show();        
            });
        },
        /**
         * Open mini shopping cart.
         * @returns {void}
         */
        openMinicart: function () {
            $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("open");
            // $(this.minicartElement).find(this.dropdownDialogElement).dropdownDialog('open');
            //set timeout
            setTimeout(function() {
                $('[data-block="minicart"]').find('[data-role="dropdownDialog"]').dropdownDialog("close");
            }, 3000); 
            var minicart = $('[data-block="minicart"]'); 
            //var minicart2 = $('.minicart-wrapper');       
            var minicartPopup = minicart.find('[data-role="dropdownDialog"]').dropdownDialog('open');        
            var timeout = 3000;
            if (minicartPopup.length) {        
                setTimeout(function () {                 
                    minicartPopup.hide();             
                }, timeout);         
            }






<?php

namespace MDC\Abandoncart\Console\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Magento\Framework\Mail\Template\TransportBuilder;
use Magento\Framework\App\State;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\App\Config\ScopeConfigInterface;
//use Magento\Quote\Api\CartRepositoryInterface;
use Magento\Quote\Model\ResourceModel\Quote\CollectionFactory;
class SendQuoteEmailCommand extends Command
{
    protected $transportBuilder;
    protected $appState;
    protected $storeManager;
    protected $scopeConfig;
    protected $cart;
    protected $quoteCollectionFactory;
    //private $quoteRepository;
    //protected $quoteFactory;
    //private $quoteId;
    
    const XML_PATH_ABANDONED_EMAIL = 'abandoncart/general/abandoned_email_select_all_email';

    public function __construct(
        TransportBuilder $transportBuilder,
        State $appState,
        StoreManagerInterface $storeManager,
        ScopeConfigInterface $scopeConfig,
        CollectionFactory $quoteCollectionFactory
        //CartRepositoryInterface $cartRepository
        //\Magento\Quote\Api\CartRepositoryInterface $quoteRepository
    ) {
        parent::__construct();
        $this->transportBuilder = $transportBuilder;
        $this->appState = $appState;
        $this->storeManager = $storeManager;
        $this->scopeConfig = $scopeConfig;
        $this->quoteCollectionFactory = $quoteCollectionFactory;
        //$this->quoteRepository = $quoteRepository;
        //$this->cartRepository = $cartRepository;
    }

    protected function configure()
    {
        $this->setName('mdcabandonedcart:sendquoteemail')
            ->setDescription('Send quote details via email.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {  
        $quoteCollection = $this->quoteCollectionFactory->create();         
        $quoteIds = $quoteCollection->getAllIds();         
        if (!empty($quoteIds)) {             
            foreach ($quoteIds as $quoteId) {                 
                $output->writeln("Quote ID: " . $quoteId);             
            }         
        } else {             
            $output->writeln("No quote IDs found.");         
        }
        
    }
    
}
========================================================================================
accept numberic only
$("#mobileno").addClass("mobile-check");
    var regex = /^[0-9]+$/;
    $.validator.addMethod(
        'mobile-check', function (value) {
            if(regex.test(value)) 
            {
                return true;
            }
        },
        $.mage.__("Please enter a valid number in this field.")
    );
    $("#telephoneno").addClass("telephone-check");
    var regExp = /^[0-9]+$/;
    $.validator.addMethod(
        'telephone-check', function (value) {
            if(regExp.test(value)) 
            {
                return true;
            }
        },
        $.mage.__("Please enter a valid number in this field.")
    );
=====================================================================================
var regexpUSAZip = /^\d{5}(?:-\d{4})?$/;
=============================================================================
    public function getVendorIdByZipcode($zipcode)
    {
        
        $ahmedabadVendorZipcodes = array('380001','380002','380003','380004','380005','380006','380007');
        $hydrabadVendorZipcodes = array('500001','500002','500003','500004','500005','500006','500007');

        if(isset($zipcode) && $zipcode != '') {
            // $zipcode = $_COOKIE['zipcode_availability'];
            // $zipcode = strtoupper(str_replace(" ","",$zipcode));
            // $a="";
            $connection = $this->resourceConnection->getConnection();
            $table = $connection->getTableName('md_vendor_zipcode');
            $sql = $connection->select()->from($table,'zipcode');
            $result = $connection->fetchAll($sql);
            $array = [];
            foreach($result as $values){
                array_push($array,$values['zipcode']);
            }
            $zipcode = strtoupper($zipcode);
            $zipcodeToMatch = substr($zipcode, 0, 5); 

            if (in_array($zipcodeToMatch, $array)) {
                $modelcollection = $this->zipcodeFactory->create()->getCollection()->addFieldToFilter('zipcode', $zipcodeToMatch);

                foreach ($modelcollection as $col) {
                    return $col->getVendorId();
                }
                if($modelcollection->getSize() == 0){
                    $vendorId = 1;
                    $modelcollection = $this->zipcodeFactory->create()->getCollection()->addFieldToFilter('vendor_id', $vendorId);
                    if($modelcollection->getSize() >= 1){
                        return "1";
                    }
                }
            } 
        }
    }
=================================================================================================================================
app/design/frontend/Amasty/JetTheme/Magento_CustomerCustomAttributes/templates/customer/address/edit.phtml
    $(document).ready(function(){
        $("#telephone").addClass("telephone-custom-message-required");
        $.validator.addMethod(
            'telephone-custom-message-required', function (value) {
                var numberValue = value.replace(/[^0-9\s]/g, '');
                var formattedValue = '';
                if (numberValue.length > 3) {
                    formattedValue += numberValue.substr(0, 3) + '-';
                    if (numberValue.length > 6) {
                        formattedValue += numberValue.substr(3, 3) + '-';
                        formattedValue += numberValue.substr(6);
                    } else {
                        formattedValue += numberValue.substr(3);
                    }
                } else {
                    formattedValue = numberValue;
                }

                $("#telephone").val(formattedValue.substr(0, 12));
                return /^\d{3}-\d{3}-\d{4}$/.test(formattedValue);
            }, $.mage.__("This filed is requried.")
        );
        $("#telephone").on('input', function() {
            $(this).valid();
        });
   
    });
$("#zip").addClass("postcode-format-check");
    $.validator.addMethod(
        'postcode-format-check', function (value) {
            var regexp = /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$|^\d{5}(-\d{4})?$/;
            var zipcode = value.toUpperCase();
            if(regexp.test(zipcode)) {
                return true;
            }
        },
        $.mage.__("Please enter a valid postcode.")
    );
    $("#updateAddressbtn").click(function(){
        var postcode = $("#zip").val();
        postcode = postcode.toUpperCase();
        var regexp = new RegExp("\\s+");
        // if(! regexp.test(postcode)) {
        //     postcode = postcode.replace(/-.*/, '');
        // }
        $("#zip").val(postcode);
===============================================================================
app/design/frontend/Amasty/JetTheme/Magento_CustomerCustomAttributes/templates/customer/form/edit.phtml
 $( document ).ready(function () {
            $("#telephoneno").on("input", function () {
                var Value = $(this).val();
                var numberValue = Value.replace(/[^0-9\s]/g, '');
                var formattedValue = '';
                if (numberValue.length > 3) {
                    formattedValue += numberValue.substr(0, 3) + '-';
                    if (numberValue.length > 6) {
                        formattedValue += numberValue.substr(3, 3) + '-';
                        formattedValue += numberValue.substr(6);
                    } else {
                        formattedValue += numberValue.substr(3);
                    }
                } else {
                    formattedValue = numberValue;
                }
                $(this).val(formattedValue.substr(0, 12));
            });
        });


        $( document ).ready(function () {
            $("#mobileno").on("input", function () {
                var Value = $(this).val();
                var numberValue = Value.replace(/[^0-9\s]/g, '');
                var formattedValue = '';
                if (numberValue.length > 3) {
                    formattedValue += numberValue.substr(0, 3) + '-';
                    if (numberValue.length > 6) {
                        formattedValue += numberValue.substr(3, 3) + '-';
                        formattedValue += numberValue.substr(6);
                    } else {
                        formattedValue += numberValue.substr(3);
                    }
                } else {
                    formattedValue = numberValue;
                }

                $(this).val(formattedValue.substr(0, 12));
            });
        });
<script type="text/javascript">
require([
    'jquery',
    'jquery/ui',
    'jquery/validate',
    'mage/translate'
], function($){
    $("#postcode").addClass("postcode-format-check");
    //var regexp = /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/;
    var regexp = /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$|^\d{5}(-\d{4})?$/;
    $.validator.addMethod(
        'postcode-format-check', function (value) {
            var zipcode = value.toUpperCase();
            if(regexp.test(zipcode)) 
            {
                //var extractedZip = zipcode.slice(0, 5);
                //console.log(extractedZip);
                return true;
            }
        },
        $.mage.__("Please enter a valid postcode.")
    );
    $('#postcode').on("keyup", function() {
        var dInput = this.value;
        if(dInput) {
            var zipcode = dInput.toUpperCase();
            if(regexp.test(zipcode)) 
            {
                $('#postcode-error').hide();
            }
            else{
                $('#postcode-error').show();
            }
        }
    });
    $("#savedetailsbtn").click(function(){
        var postcode = $("#postcode").val();
        postcode = postcode.toUpperCase();
        var regexp = new RegExp("\\s+");
        // if(! regexp.test(postcode)) {
        //     //postcode = postcode.replace(/-.*/, '');
        //     //postcode = postcode.replace(/(\s-\s.*)|(\-.*)/, '');
        // }
        $("#postcode").val(postcode);
    }); 
});
</script>
======================================================================================
try this to work
$(document).ready(function(){
        $("#telephoneno").addClass("telephone-check");
        $.validator.addMethod(
            'telephone-check', function (value) {
                var numberValue = value.replace(/[^0-9\s]/g, '');
                var formattedValue = '';
                if (numberValue.length > 3) {
                    formattedValue += numberValue.substr(0, 3) + '-';
                    if (numberValue.length > 6) {
                        formattedValue += numberValue.substr(3, 3) + '-';
                        formattedValue += numberValue.substr(6);
                    } else {
                        formattedValue += numberValue.substr(3);
                    }
                } else {
                    formattedValue = numberValue;
                }

                $("#telephoneno").val(formattedValue.substr(0, 12));
                return /^\d{3}-\d{3}-\d{4}$/.test(formattedValue);
            }, $.mage.__("This filed is requried.")
        );
        $("#telephoneno").on('input', function() {
            $(this).valid();
        });
   
        
================================================================================        
        
        
        $( document ).ready(function () {
            $("#mobileno").addClass("mobile-check");
            $("#mobileno").on("input", function () {
                var Value = $(this).val();
                var numberValue = Value.replace(/[^0-9\s]/g, '');
                var formattedValue = '';
                if (numberValue.length > 3) {
                    formattedValue += numberValue.substr(0, 3) + '-';
                    if (numberValue.length > 6) {
                        formattedValue += numberValue.substr(3, 3) + '-';
                        formattedValue += numberValue.substr(6);
                    } else {
                        formattedValue += numberValue.substr(3);
                    }
                } else {
                    formattedValue = numberValue;
                }

                $(this).val(formattedValue.substr(0, 12));
                $.validator.addMethod(
                    'mobile-check',
                    function (v) {
                        var number = $.trim(v);
                        if (!/^\d{3}-\d{3}-\d{4}$/.test(number)) {
                            return false;
                        }
                        return true;
                    },
                    $.mage.__('Invalid telephone number format')
                );
                $('#mobileno').validation();
            });
        });
=============================================================
<?php
namespace MDC\AvailableDeliveryDays\Controller\Sellerhtml\Delivery;

use Magento\Framework\App\Action\Context;
use Magento\Framework\App\Action\Action;
 
class RegionIdFinder extends Action
{
    protected $regionFactory;
    protected $resultPageFactory;
 
    public function __construct(
        Context $context,
        \Magento\Directory\Model\RegionFactory $regionFactory,
        \Magento\Framework\View\Result\PageFactory $resultPageFactory
    ) {
        $this->_regionFactory = $regionFactory;
        $this->resultPageFactory = $resultPageFactory;
        parent::__construct($context);
    }
 
    public function execute()
    {
        $code = $this->getRequest()->getParam('stateCode');
        $country_id = $this->getRequest()->getParam('countryCode');
        $region = $this->_regionFactory->create();
        $regionId = $region->loadByCode($code, $country_id)->getId();
        
        // Pass data to the block
        $resultPage = $this->resultPageFactory->create();
        $block = $resultPage->getLayout()->getBlock('your_block_name');
        $block->setData('regionId', $regionId);
        
        return $resultPage;
    }
}
=======================================================================================================
accordions
$(document).ready(function () {
            $("#elementOrderHistoryParentViewList").accordion({
                "openedState": "active",
                "collapsible": true,
                'heightStyle': 'content',
                "multipleCollapsible": false,
                active: 0,
                create: function(event, ui) {
                    toggleIcons("elementOrderHistoryParentViewList");
                },
                activate: function(event, ui) {
                    toggleIcons("elementOrderHistoryParentViewList", ui.newHeader[0]);
                }
            });
            $("#elementOrderHistorychildViewList").accordion({
                "openedState": "active",
                "collapsible": true,
                'heightStyle': 'content',
                "multipleCollapsible": false,
                active: 0,
                create: function(event, ui) {
                    toggleIcons("elementOrderHistorychildViewList");
                },
                activate: function(event, ui) {
                    toggleIcons("elementOrderHistorychildViewList", ui.newHeader[0]);
                }
            });
        });
         // Function to toggle icons
         function toggleIcons(accordionId, activeHeader) {
                $("#" + accordionId + " .ui-accordion-header").each(function(index, element) {
                    var isActive = (activeHeader && element === activeHeader) || $(element).hasClass("ui-state-active");
                    var plusIcon = $(element).find(".plusico");
                    var minusIcon = $(element).find(".minico");
            
                    if (isActive) {
                        plusIcon.hide();
                        minusIcon.show();
                    } else {
                        plusIcon.show();
                        minusIcon.hide();
                    }
                });
            }
			accordance another example
			activate: function(event, ui) {
                            toggleIcons("note-popup-element");
                        // Remove inline height style from active accordion content
                           setTimeout(function() {
                                var activeAccordionContent = $(".ui-accordion-content.ui-accordion-content-active");
                                activeAccordionContent.css("height", "");
                            },10);
                        }
===========================================================================================================================
public function getAddressDetails($id)
    {
        $customerAddress = $this->wffCustomerAddress->load($id, 'child_id');
        $addressDetails = [
            'address_line1' => $customerAddress->getData('address_line1'),
            'address_line2' => $customerAddress->getData('address_line2'),
            'city' => $customerAddress->getData('region'),
            'postcode' => $customerAddress->getData('postal_code')
        ];
        return $addressDetails;
    }
